import psycopg2
import pygame
import json
import random

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def connect_db():
    return psycopg2.connect(
        dbname="phonebook_db",
        user="postgres",
        password="22041983re",  # –í–∞—à –ø–∞—Ä–æ–ª—å
        host="localhost"
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user(username):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users WHERE username = %s", (username,))
    user = cursor.fetchone()
    if not user:
        cursor.execute("INSERT INTO users (username) VALUES (%s) RETURNING user_id", (username,))
        user_id = cursor.fetchone()[0]
        cursor.execute("INSERT INTO user_scores (user_id, level, score) VALUES (%s, 1, 0)", (user_id,))
        conn.commit()
        print(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —Å–æ–∑–¥–∞–Ω!")
    else:
        user_id = user[0]
        cursor.execute("SELECT level, score FROM user_scores WHERE user_id = %s", (user_id,))
        level, score = cursor.fetchone()
        print(f"üïπÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}! –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {level}, —Å—á—ë—Ç: {score}")
    conn.close()
    return user_id

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
def save_game(user_id, level, score, state):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE user_scores SET level = %s, score = %s, saved_state = %s WHERE user_id = %s",
        (level, score, json.dumps(state), user_id)
    )
    conn.commit()
    conn.close()
    print("üíæ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

# –û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–∞
def play_game(username):
    user_id = get_user(username)
    pygame.init()
    screen = pygame.display.set_mode((800, 600))
    pygame.display.set_caption("Snake Game")
    clock = pygame.time.Clock()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã
    snake_pos = [[100, 100], [90, 100], [80, 100]]
    direction = "RIGHT"
    food_pos = [random.randrange(1, 80) * 10, random.randrange(1, 60) * 10]
    score = 0
    level = 1
    
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    save_game(user_id, level, score, {"snake_pos": snake_pos})
                    running = False
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–º–µ–π–∫–æ–π
                elif event.key == pygame.K_UP and direction != "DOWN":
                    direction = "UP"
                elif event.key == pygame.K_DOWN and direction != "UP":
                    direction = "DOWN"
                elif event.key == pygame.K_LEFT and direction != "RIGHT":
                    direction = "LEFT"
                elif event.key == pygame.K_RIGHT and direction != "LEFT":
                    direction = "RIGHT"
        
        # –î–≤–∏–∂–µ–Ω–∏–µ –∑–º–µ–π–∫–∏
        if direction == "UP":
            snake_pos.insert(0, [snake_pos[0][0], snake_pos[0][1] - 10])
        elif direction == "DOWN":
            snake_pos.insert(0, [snake_pos[0][0], snake_pos[0][1] + 10])
        elif direction == "LEFT":
            snake_pos.insert(0, [snake_pos[0][0] - 10, snake_pos[0][1]])
        elif direction == "RIGHT":
            snake_pos.insert(0, [snake_pos[0][0] + 10, snake_pos[0][1]])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—ä–µ–¥–µ–Ω–∏–µ –µ–¥—ã
        if snake_pos[0] == food_pos:
            score += 10
            food_pos = [random.randrange(1, 80) * 10, random.randrange(1, 60) * 10]
        else:
            snake_pos.pop()
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞
        screen.fill((0, 0, 0))
        for pos in snake_pos:
            pygame.draw.rect(screen, (0, 255, 0), pygame.Rect(pos[0], pos[1], 10, 10))
        pygame.draw.rect(screen, (255, 0, 0), pygame.Rect(food_pos[0], food_pos[1], 10, 10))
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á—ë—Ç–∞
        font = pygame.font.SysFont(None, 35)
        score_text = font.render(f"–°—á—ë—Ç: {score} | –£—Ä–æ–≤–µ–Ω—å: {level}", True, (255, 255, 255))
        screen.blit(score_text, (10, 10))
        
        pygame.display.flip()
        clock.tick(15)  # –°–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä—ã
    
    pygame.quit()

# –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã
if __name__ == "__main__":
    username = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username: ")
    play_game(username)