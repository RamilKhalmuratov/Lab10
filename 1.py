import psycopg2
import csv

def connect_db():
    return psycopg2.connect(
        dbname="phonebook_db",
        user="postgres",
        password="22041983re", 
        host="localhost"
    )

def create_table():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS phonebook (
            id SERIAL PRIMARY KEY,
            first_name VARCHAR(50) NOT NULL,
            phone VARCHAR(20) NOT NULL UNIQUE
        );
    """)
    conn.commit()
    conn.close()

def create_csv_file():
    try:
        with open('phones.csv', 'x', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(['first_name', 'phone'])
    except FileExistsError:
        pass

def insert_from_csv():
    conn = connect_db()
    cursor = conn.cursor()
    try:
        with open('phones.csv', 'r') as f:
            reader = csv.reader(f)
            next(reader)
            for row in reader:
                cursor.execute(
                    "INSERT INTO phonebook (first_name, phone) VALUES (%s, %s)",
                    row
                )
        conn.commit()
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ CSV –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª 'phones.csv' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    finally:
        conn.close()

def insert_from_console():
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
    phone = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω: ")
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO phonebook (first_name, phone) VALUES (%s, %s)",
        (name, phone)
    )
    conn.commit()
    conn.close()
    print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç '{name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    try:
        with open('phones.csv', 'a', newline='') as f:
            writer = csv.writer(f)
            writer.writerow([name, phone])
        print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç '{name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª phones.csv!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ CSV: {e}")

def update_data():
    user_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞: ")
    new_name = input("–ù–æ–≤–æ–µ –∏–º—è (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è): ")
    new_phone = input("–ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è): ")
    conn = connect_db()
    cursor = conn.cursor()
    if new_name:
        cursor.execute(
            "UPDATE phonebook SET first_name = %s WHERE id = %s",
            (new_name, user_id)
        )
    if new_phone:
        cursor.execute(
            "UPDATE phonebook SET phone = %s WHERE id = %s",
            (new_phone, user_id)
        )
    conn.commit()
    conn.close()
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

def delete_data():
    target = input("–£–¥–∞–ª–∏—Ç—å –ø–æ –∏–º–µ–Ω–∏ (1) –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É (2)? ")
    conn = connect_db()
    cursor = conn.cursor()
    if target == "1":
        name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
        cursor.execute("DELETE FROM phonebook WHERE first_name = %s", (name,))
    else:
        phone = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω: ")
        cursor.execute("DELETE FROM phonebook WHERE phone = %s", (phone,))
    conn.commit()
    conn.close()
    print("‚úÖ –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!")

def query_data():
    search = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞: ")
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT * FROM phonebook WHERE first_name LIKE %s OR phone LIKE %s",
        (f"%{search}%", f"%{search}%")
    )
    results = cursor.fetchall()
    if results:
        print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
        for row in results:
            print(f"ID: {row[0]}, –ò–º—è: {row[1]}, –¢–µ–ª–µ—Ñ–æ–Ω: {row[2]}")
    else:
        print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    conn.close()

def show_all_contacts():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM phonebook ORDER BY id")
    results = cursor.fetchall()
    print("\nüìã –í—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:")
    for row in results:
        print(f"ID: {row[0]}, –ò–º—è: {row[1]}, –¢–µ–ª–µ—Ñ–æ–Ω: {row[2]}")
    conn.close()

def main():
    create_table()
    create_csv_file()
    while True:
        print("\n=== PhoneBook Manager ===")
        print("1. –î–æ–±–∞–≤–∏—Ç—å –∏–∑ CSV\n2. –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é\n3. –û–±–Ω–æ–≤–∏—Ç—å\n4. –£–¥–∞–ª–∏—Ç—å\n5. –ü–æ–∏—Å–∫\n6. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ\n7. –í—ã—Ö–æ–¥")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
        if choice == "1":
            insert_from_csv()
        elif choice == "2":
            insert_from_console()
        elif choice == "3":
            update_data()
        elif choice == "4":
            delete_data()
        elif choice == "5":
            query_data()
        elif choice == "6":
            show_all_contacts()
        elif choice == "7":
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main()
